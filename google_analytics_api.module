<?php
// $Id$

require 'gapi.class.php';

// help hook
//function google_analytics_api_help($path, $arg);

/**
 * Implementation of hook_menu().
 */
function google_analytics_api_menu() {
  $items['admin/settings/google_analytics_api'] = array(
    'title' => 'Google Analytics API settings',
    'description' => 'Manage the currently logged in Analytics account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_analytics_api_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['google_analytics_api'] = array(
    'title' => 'Google Analytics API Query',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_analytics_api_query_form'),
    'access arguments' => array('access Google Analytics data'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Main form for query page.
 */
function google_analytics_api_query_form($form_state) {
  $form = array();

  $form['query']['info'] = array(
    '#value' => 'Please see ' . l('Google Analytics Data API Reference', 'http://code.google.com/apis/analytics/docs/gdata/gdataReference.html') . ' for a list of dimensions and metrics.',
  );
  $form['query']['dimensions'] = array(
    '#type' => 'textfield',
    '#title' => 'Dimensions',
    '#description' => '(browser, browserVersion, city, connectionSpeed, continent, date, hostname, pagePath, pageTitle...)',
  );
  @$form['query']['metrics'] = array(
    '#type' => 'textfield',
    '#title' => 'Metrics',
    '#description' => '(entrances, pageviews, timeOnPage, visitors, visits...)',
  );
  @$form['query']['sort_metric'] = array(
    '#type' => 'textfield',
    '#title' => 'Sort Metric',
    '#description' => '(e.g. -entrances, pageviews)',
  );
  @$form['query']['filter'] = array(
    '#type' => 'textfield',
    '#title' => 'Filter',
    '#description' => '(e.g. country == United States && browser == Firefox || browser == Chrome)',
  );
  $form['query']['start_date'] = array(
    '#type' => 'date',
    '#title' => 'Start Date',
  );
  $form['query']['no_start_date'] = array(
    '#type' => 'checkbox',
    '#title' => 'No start date.',
    '#default_value' => 1,
    '#description' => '(Default: Google Analytics launch date [1 Jan 2005])',
  );
  $form['query']['end_date'] = array(
    '#type' => 'date',
    '#title' => 'End Date',
  );
  $form['query']['no_end_date'] = array(
    '#type' => 'checkbox',
    '#title' => 'No end date.',
    '#default_value' => 1,
    '#description' => '(Default: Today)',
  );
  $form['query']['start_index'] = array(
    '#type' => 'textfield',
    '#title' => 'Start Index',
    '#default_value' => 1,
  );
  $form['query']['max_results'] = array(
    '#type' => 'textfield',
    '#title' => 'Maximum Results',
    '#default_value' => 30,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit query',
  );
  $form['#redirect'] = FALSE;

  if (!empty($form_state['post'])) {
    $form['results'] = array(
      '#type' => 'item',
      '#title' => t('Query results'),
      '#value' => _google_analytics_api_query_form_fetch_results($form_state),
    );
  }

  return $form;
}

function _google_analytics_api_query_form_fetch_results($form_state = array()) {
  $dimensions = google_analytics_api_query_form_process($form_state['post']['dimensions']);
  $metrics = google_analytics_api_query_form_process($form_state['post']['metrics']);
  $sort_metric = google_analytics_api_query_form_process($form_state['post']['sort_metric']);
  $filter = $form_state['post']['filter'];
  $start_date = null;
  if ($form_state['post']['no_start_date'] != '1') {
    $start_date =
      $form_state['post']['start_date']['year'] . '-' .
      str_pad($form_state['post']['start_date']['month'], 2, '0', STR_PAD_LEFT) . '-' .
      str_pad($form_state['post']['start_date']['day'], 2, '0', STR_PAD_LEFT);
  }
  $end_date = null;
  if ($form_state['post']['no_end_date'] != '1') {
    $end_date =
      $form_state['post']['end_date']['year'] . '-' .
      str_pad($form_state['post']['end_date']['month'], 2, '0', STR_PAD_LEFT) . '-' .
      str_pad($form_state['post']['end_date']['day'], 2, '0', STR_PAD_LEFT);
  }
  $start_index = $form_state['post']['start_index'];
  $max_results = $form_state['post']['max_results'];
  try {
    $entries = google_analytics_api_report_data(
      $dimensions, $metrics, $sort_metric, $filter,
      $start_date, $end_date, $start_index, $max_results);
  } catch (Exception $e) {
    return $e->getMessage();
  }

  $header = array_merge($dimensions, $metrics);

  $rows = array();
  foreach ($entries as $entry) {
    $row = array();
    $row = array_merge($row, $entry->getDimensions());
    $row = array_merge($row, $entry->getMetrics());
    $rows[] = $row;
  }
  $totals = array('Aggregate Value');
  $totals = array_pad($totals, sizeof($dimensions), '');
  $totals = array_merge($totals, google_analytics_api_gapi()->getMetrics());
  $rows[] = $totals;

  return theme('table', $header, $rows);
}

/**
 * Process a query string.
 */
function google_analytics_api_query_form_process($string) {
  $array = explode(',', $string);
  $return = array();
  foreach ($array as $value)
    if ($value = trim($value))
      $return[] = $value;
  return $return;
}

/**
 * The admin form.
 */
function google_analytics_api_admin() {
  $form = array();

  if (google_analytics_api_check_token()) {
    $form['login_status'] = array(
      '#value' => 'Currently you are logged in. ',
      '#weight' => -10,
    );
    $form['logout'] = array(
      '#type' => 'submit',
      '#value' => 'Logout',
      '#weight' => -5,
    );
    $form['profile_id'] = array(
      '#type' => 'select',
      '#title' => 'Profile',
      '#options' => google_analytics_api_admin_account_data_options(),
      '#default_value' => variable_get('google_analytics_api_profile_id', 0),
      '#description' => t('Choose your website\'s profile'),
      '#required' => TRUE,
      '#weight' => -2,
    );
    /*$profile = google_analytics_api_current_profile();
    $date = strtotime($profile->getUpdated());
    $form['profile_status'] = array(
      '#value' => '<div><em>(Profile last updated ' . date('F j, Y h:i:s A', $date) . ')</em></div>',
      '#weight' => -1,
    );*/
    $form['buttons']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save configuration',
      '#weight' => 3,
    );
  } else {
    $form['logout_status'] = array(
      '#value' => 'You may not access statistics without logging in. ',
      '#weight' => -10,
    );
    $form['buttons']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Login to a Google account',
    );
  }

  return $form;
}

/*
 * Returns an associative array of profile IDs and their names for an account.
 */
function google_analytics_api_admin_account_data_options() {
    $accounts = google_analytics_api_account_data();
    $options = array();
    $i = 0;
    foreach ($accounts as $account)
      $options[$account->getProfileId()] = $account->getTitle() . ' (' . $account->getProfileId() . ')';
    return $options;
}

/*
 * Admin form callback, run on submission of any buttons.
 */
function google_analytics_api_admin_submit($form, &$form_state) {
  if (variable_get('google_analytics_api_token', null)) {
    if ($form_state['clicked_button']['#value'] == 'Logout') {
      drupal_set_message(t('You have been logged out of your Google account.'));
      return google_analytics_api_logout();
    } elseif ($form_state['clicked_button']['#value'] == 'Save configuration') {
      variable_set('google_analytics_api_profile_id', intval($form_state['values']['profile_id']));
    }
  } else {
    return google_analytics_api_authenticate();
  }
}

/**
 * Implementation of hook_perm().
 */
function google_analytics_api_perm() {
  return array('access Google Analytics data');
}

/**
 * Check for a returned token in the URL.
 */
function google_analytics_api_check_token() {
  $gapi = gapiAuthSub::checkToken();
  if ($gapi) {
    variable_set('google_analytics_api_token', $gapi->getToken());
    $accounts = google_analytics_api_account_data();
    $id = $accounts[0]->getProfileId();
    variable_set('google_analytics_api_profile_id', $id);
    drupal_set_message(t('You have been logged into your Google account.'));
    header('Location: ' . gapiUrl::currentUrlWithoutGet());
    exit;
  }
  return google_analytics_api_current_token(true);
}

/**
 * Return current token string.
 */
function google_analytics_api_current_token($silent=false) {
  $token = variable_get('google_analytics_api_token', null);
  if (!$token && !$silent)
    drupal_set_message(t('A Google Analytics API method has been called that requires a Google account be logged in.  Please visit the preferences page to do so.'));
  return $token;
}

/**
 * Return current profile ID.
 */
function google_analytics_api_current_profile_id($silent=false) {
  $profile_id = variable_get('google_analytics_api_profile_id', null);
  if (!$profile_id && !$silent)
    drupal_set_message(t('A method has been called that requires a Google Analytics Profile.  Please visit the preferences page to set one.'));
  return $profile_id;
}

/*
 * Retrieve current profile object.
 */
function google_analytics_api_current_profile() {
  $profiles = google_analytics_api_account_data();
  foreach ($profiles as $profile)
    if ($profile->getProfileId() == google_analytics_api_current_profile_id())
      return $profile;
  return null;
}

/*
 * Programatically trigger a login.
 */
function google_analytics_api_authenticate() {
  return gapiAuthSub::authenticate();
}

/*
 * Programatically trigger a logout.
 */
function google_analytics_api_logout() {
  try {
    google_analytics_api_gapi()->revokeToken();
  } catch (Exception $e) { }
  variable_set('google_analytics_api_token', null);
  variable_set('google_analytics_api_profile_id', null);
}

/*
 * Return a gapi object built from the currently stored token.
 */
function google_analytics_api_gapi() {
  static $gapi;

  if (user_access('access Google Analytics data')) {
    if ($gapi)
      return $gapi;
    $token = google_analytics_api_current_token();
    if ($token) {
      $gapi = gapiAuthSub::withToken($token);
      return $gapi;
    }
  }
  return false;
}

/*
 * Request account data (profile IDs and names).
 */
function google_analytics_api_account_data() {
  try {
    $data = google_analytics_api_gapi()->requestAccountData();
  } catch (Exception $e) {
    return google_analytics_api_logout();
  }
  return $data;
}

/*
 * Request report data.
 */
function google_analytics_api_report_data($dimensions=null, $metrics, $sort_metric=null, $filter=null, $start_date=null, $end_date=null, $start_index=1, $max_results=30) {
  // insert a check to see if we have this query cached
  return google_analytics_api_gapi()->requestReportData(
    variable_get('google_analytics_api_profile_id', 0),
    $dimensions, $metrics, $sort_metric, $filter,
    $start_date, $end_date, $start_index, $max_results);
}

/*
 * Implementation of hook_nodeapi().
 */
function google_analytics_api_nodeapi($node, $op, $arg = 0) {
  switch ($op) {
    case 'load':
      $statistics = array();
      $output['google_analytics'] = $statistics;
      return $output;
  }
}
