<?php
// $Id$

require 'gapi.class.php';
require 'google_analytics_api.gui.inc';

/**
 * Implementation of hook_menu().
 */
function google_analytics_api_menu() {
  $items['admin/settings/google_analytics_api'] = array(
    'title' => t('Google Analytics API settings'),
    'description' => t('Manage the currently logged in Analytics account'),
    'page callback' => 'drupal_get_form',
		'file' => 'google_analytics_api.admin.inc',
    'page arguments' => array('google_analytics_api_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['google_analytics_api'] = array(
    'title' => t('Google Analytics API Query'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_analytics_api_query_form'),
		'file' => 'google_analytics_api.admin.inc',
    'access arguments' => array('access Google Analytics data'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function google_analytics_api_perm() {
  return array('access Google Analytics data');
}

/**
 * Check for a returned token in the URL.
 */
function google_analytics_api_check_token() {
  $gapi = gapiAuthSub::checkToken();
  if ($gapi) {
    variable_set('google_analytics_api_token', $gapi->getToken());
    $accounts = google_analytics_api_account_data();
    $id = $accounts[0]->getProfileId();
    variable_set('google_analytics_api_profile_id', $id);
    drupal_set_message(t('You have been logged into your Google account.'));
    header('Location: ' . gapiUrl::currentUrlWithoutGet());
    exit;
  }
  return google_analytics_api_current_token(true);
}

/**
 * Return current token string.
 */
function google_analytics_api_current_token($silent=false) {
  $token = variable_get('google_analytics_api_token', null);
  if (!$token && !$silent)
    drupal_set_message(t('A Google Analytics API method has been called that requires a Google account be logged in.  Please visit the preferences page to do so.'));
  return $token;
}

/**
 * Return current profile ID.
 */
function google_analytics_api_current_profile_id($silent=false) {
  $profile_id = variable_get('google_analytics_api_profile_id', null);
  if (!$profile_id && !$silent)
    drupal_set_message(t('A method has been called that requires a Google Analytics Profile.  Please visit the preferences page to set one.'));
  return $profile_id;
}

/*
 * Retrieve current profile object.
 */
function google_analytics_api_current_profile() {
  $profiles = google_analytics_api_account_data();
  foreach ($profiles as $profile)
    if ($profile->getProfileId() == google_analytics_api_current_profile_id())
      return $profile;
  return null;
}

/*
 * Programatically trigger a login.
 */
function google_analytics_api_authenticate() {
  return gapiAuthSub::authenticate();
}

/*
 * Programatically trigger a logout.
 */
function google_analytics_api_logout() {
  try {
    google_analytics_api_gapi()->revokeToken();
  } catch (Exception $e) { }
  variable_set('google_analytics_api_token', null);
  variable_set('google_analytics_api_profile_id', null);
}

/*
 * Return a gapi object built from the currently stored token.
 */
function google_analytics_api_gapi() {
  static $gapi;

  if (user_access('access Google Analytics data')) {
    if ($gapi)
      return $gapi;
    $token = google_analytics_api_current_token();
    if ($token) {
      $gapi = gapiAuthSub::withToken($token);
      return $gapi;
    }
  }
  return false;
}

/*
 * Request account data (profile IDs and names).
 */
function google_analytics_api_account_data() {
  try {
    $data = google_analytics_api_gapi()->requestAccountData();
  } catch (Exception $e) {
    return google_analytics_api_logout();
  }
  return $data;
}

/*
 * Request report data.
 */
function google_analytics_api_report_data($dimensions=null, $metrics, $sort_metric=null, $filter=null, $start_date=null, $end_date=null, $start_index=1, $max_results=30) {
  // insert a check to see if we have this query cached
  return google_analytics_api_gapi()->requestReportData(
    variable_get('google_analytics_api_profile_id', 0),
    $dimensions, $metrics, $sort_metric, $filter,
    $start_date, $end_date, $start_index, $max_results);
}
